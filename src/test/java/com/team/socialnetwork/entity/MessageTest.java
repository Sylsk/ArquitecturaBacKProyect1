package com.team.socialnetwork.entity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

class MessageTest {

    private Message message;
    private User sender;
    private User receiver;

    @BeforeEach
    void setUp() {
        sender = new User();
        sender.setId(1L);
        sender.setUsername("sender");

        receiver = new User();
        receiver.setId(2L);
        receiver.setUsername("receiver");

        message = new Message();
    }

    @Test
    @DisplayName("Should create Message with default constructor")
    void shouldCreateMessageWithDefaultConstructor() {
        // When
        Message newMessage = new Message();

        // Then
        assertNotNull(newMessage);
        assertNull(newMessage.getId());
        assertNull(newMessage.getContent());
        assertNull(newMessage.getSender());
        assertNull(newMessage.getReceiver());
        assertNull(newMessage.getCreatedAt());
        assertFalse(newMessage.isRead());
    }

    @Test
    @DisplayName("Should create Message with parameterized constructor")
    void shouldCreateMessageWithParameterizedConstructor() {
        // Given
        String content = "Test message content";

        // When
        Message newMessage = new Message(sender, receiver, content);

        // Then
        assertNotNull(newMessage);
        assertEquals(content, newMessage.getContent());
        assertEquals(sender, newMessage.getSender());
        assertEquals(receiver, newMessage.getReceiver());
        assertFalse(newMessage.isRead());
    }

    @Test
    @DisplayName("Should set and get all properties correctly")
    void shouldSetAndGetAllPropertiesCorrectly() {
        // Given
        String content = "Test message";
        boolean isRead = true;

        // When
        message.setContent(content);
        message.setSender(sender);
        message.setReceiver(receiver);
        message.setRead(isRead);

        // Then
        assertEquals(content, message.getContent());
        assertEquals(sender, message.getSender());
        assertEquals(receiver, message.getReceiver());
        assertTrue(message.isRead());
        // Note: In unit tests, ID and createdAt may be null since they are generated by JPA/Database
        // In a real database context, these would be automatically set
        // In a real database context, it would be automatically set
    }

    @Test
    @DisplayName("Should handle null values appropriately")
    void shouldHandleNullValuesAppropriately() {
        // When
        message.setContent(null);
        message.setSender(null);
        message.setReceiver(null);

        // Then
        assertNull(message.getContent());
        assertNull(message.getSender());
        assertNull(message.getReceiver());
    }

    @Test
    @DisplayName("Should handle empty content")
    void shouldHandleEmptyContent() {
        // When
        message.setContent("");

        // Then
        assertEquals("", message.getContent());
    }

    @Test
    @DisplayName("Should toggle read status correctly")
    void shouldToggleReadStatusCorrectly() {
        // Given
        assertFalse(message.isRead()); // Default is false

        // When
        message.setRead(true);

        // Then
        assertTrue(message.isRead());

        // When
        message.setRead(false);

        // Then
        assertFalse(message.isRead());
    }
}